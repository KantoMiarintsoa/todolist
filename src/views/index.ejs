<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion des Tâches</title>
    <link rel="stylesheet" href="/css/todolist.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

    <style>
.modal {
  display: none; 
  position: fixed;
  z-index: 1; 
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5); 
  padding-top: 60px;
}

.modal-content {
  background-color: white;
  margin: auto;
  padding: 20px;
  border: 1px solid #888;
  width: 80%;
  max-width: 500px;
}

.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}

    </style>
    
</head>
<body>
    <div class="container">
        <div class="main-content">
            <div class="sidebar-top">
                <div class="task-count">
                    <i class="fas fa-tasks"></i> Total des tâches: <span id="task-count">0</span>
                </div>
    
                <div class="filter-sort">
                    <div class="filter-status">
                        <label for="status-filter">Filtrer par statut:</label>
                        <select id="status-filter">
                            <option value="">Tous</option>
                            <option value="completed">Terminée</option>
                            <option value="incomplete">Non Terminée</option>
                            <option value="undefined">Non définie</option>
                        </select>
                    </div>
    
                    <div class="sort-name">
                        <label for="sort-name">Trier par nom:</label>
                        <button id="sort-asc" class="sort-btn">
                            <i class="fas fa-sort-alpha-down"></i>
                        </button>
                        <button id="sort-desc" class="sort-btn">
                            <i class="fas fa-sort-alpha-up"></i>
                        </button>
                    </div>
                </div>
            </div>
            

            <div class="table-container">
                <h1>Liste des Tâches</h1>
                <table class="task-table">
                    <thead>
                        <tr>
                            <th>Nom de la tâche</th>
                            <th>Description</th>
                            <th>Statut</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="task-list">
                        <% if (tasks.length > 0) { %>
                            <% tasks.forEach((task, index) => { %>
                                <tr class="task-row" data-status="<%= task.status %>" data-id="<%= task._id%>">
                                    <td><%= task.nom %></td>
                                    <td><%= task.description %></td>
                                    <td>
                                        <select class="status-select">
                                            <option value="incomplete" <% if (task.status === "incomplete") { %>selected<% } %>>Non Terminée</option>
                                            <option value="completed" <% if (task.status === "completed") { %>selected<% } %>>Terminée</option>
                                            <option value="undefined" <% if (task.status === "undefined") { %>selected<% } %>>Non définie</option>
                                        </select>
                                    </td>
                                    
                                    <td>    
                                        <button class="edit-btn">
                                            <i class="fas fa-pencil-alt"></i>
                                        </button>
                                        <button class="delete-btn">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </td>
                                </tr>
                            <% }) %>
                        <% } else { %>
                            <tr>
                                <td colspan="5">Aucune tâche disponible.</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
        </div>

        <div class="sidebar">
            <button id="add-task-btn" class="add-task-btn">
                <span class="plus-icon">+</span> Ajouter une tâche
            </button>
        </div>
    </div>

<div id="addTaskModal" class="modal">
    <div class="modal-content">
        <span id="closeModalBtn" class="close">&times;</span>
        <h2>Ajouter une Nouvelle Tâche</h2>
        <form id="taskForm">
            <label for="taskName">Nom de la tâche :</label>
            <input type="text" id="taskName" name="taskName" required>

            <label for="taskDescription">Description :</label>
            <textarea id="taskDescription" name="taskDescription" required></textarea>

            <button type="submit" id="saveTaskBtn">Enregistrer</button>
        </form>
    </div>
</div>

<div id="editTaskModal" class="modal">
    <div class="modal-content">
        <span id="closeEditModalBtn" class="close">&times;</span>
        <h2>Modifier la Tâche</h2>
        <form id="editTaskForm">
            <input type="hidden" id="editTaskId" name="taskId"> 
            
            <label for="editTaskName">Nom de la tâche :</label>
            <input type="text" id="editTaskName" name="taskName" required>

            <label for="editTaskDescription">Description :</label>
            <textarea id="editTaskDescription" name="taskDescription" required></textarea>

            <button type="submit" id="saveEditTaskBtn">Enregistrer les modifications</button>
        </form>
    </div>
</div>

<script>
    document.querySelectorAll('.edit-btn').forEach(button => {
        button.addEventListener('click', function() {
            const taskRow = this.closest('.task-row');
            const id = taskRow.getAttribute('data-id');
            const taskName = taskRow.cells[0].textContent;
            const taskDescription = taskRow.cells[1].textContent;

            document.getElementById('editTaskId').value = id;
            document.getElementById('editTaskName').value = taskName;
            document.getElementById('editTaskDescription').value = taskDescription;

            document.getElementById('editTaskModal').style.display = 'block';
        });
    });

    document.getElementById('closeEditModalBtn').onclick = function() {
        document.getElementById('editTaskModal').style.display = 'none';
    }

    window.onclick = function(event) {
        if (event.target === document.getElementById('editTaskModal')) {
            document.getElementById('editTaskModal').style.display = 'none';
        }
    }

    document.getElementById('editTaskForm').addEventListener('submit', async function(e) {
        e.preventDefault(); 

        const id = document.getElementById('editTaskId').value;
        const nom = document.getElementById('editTaskName').value;
        const description = document.getElementById('editTaskDescription').value;

        const updatedTask = {
            nom: nom,
            description: description,
        };
        const response = await fetch(`/task/update/${id}`, {
            method: "PUT",
            body: JSON.stringify(updatedTask),
            headers: { "Content-Type": "application/json" }
        });

        const result = await response.json();

        if (response.status===200   ) {
            const taskRow = document.querySelector(`.task-row[data-id='${id}']`);
            taskRow.cells[0].textContent = nom;
            taskRow.cells[1].textContent = description;

            document.getElementById('editTaskModal').style.display = 'none';

            alert('Tâche mise à jour avec succès');
        } else {
            alert('Erreur lors de la mise à jour de la tâche.');
        }
    });
</script>



    <script>
        const tasks = <%- JSON.stringify(tasks) %>;

        document.getElementById('task-count').textContent = tasks.length;

        document.getElementById('status-filter').addEventListener('change', function() {
            const status = this.value;
            const rows = document.querySelectorAll('.task-row');
            rows.forEach(row => {
                const rowStatus = row.getAttribute('data-status');
                if (status === '' || rowStatus === status) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        });

        document.getElementById('sort-asc').addEventListener('click', function() {
            sortTasks(true);
        });

        document.getElementById('sort-desc').addEventListener('click', function() {
            sortTasks(false);
        });

        function sortTasks(ascending) {
            const table = document.querySelector('.task-table');
            const rows = Array.from(table.querySelectorAll('.task-row'));
            rows.sort((a, b) => {
                const nameA = a.cells[1].textContent.toLowerCase();
                const nameB = b.cells[1].textContent.toLowerCase();
                if (ascending) {
                    return nameA < nameB ? -1 : 1;
                } else {
                    return nameA > nameB ? -1 : 1;
                }
            });
            rows.forEach(row => table.querySelector('tbody').appendChild(row)); 
        }    
    </script>

    <script>
const addTaskBtn = document.getElementById('add-task-btn');
const addTaskModal = document.getElementById('addTaskModal');
const closeModalBtn = document.getElementById('closeModalBtn');
const taskForm = document.getElementById('taskForm');
const saveTaskBtn = document.getElementById('saveTaskBtn');

addTaskBtn.onclick = function() {
    addTaskModal.style.display = 'block';
}

closeModalBtn.onclick = function() {
    addTaskModal.style.display = 'none';
}    

window.onclick = function(event) {
    if (event.target === addTaskModal) {
        addTaskModal.style.display = 'none';
    }
}

taskForm.addEventListener('submit', async function(e) {
    e.preventDefault(); 

    const taskName = document.getElementById('taskName').value;
    const taskDescription = document.getElementById('taskDescription').value;

    const newTask = {
        nom: taskName,
        description: taskDescription,
    };

    const response= await fetch("/task/create",
        {
            method:"POST",
            body:JSON.stringify(newTask),
            headers:{"Content-type":"application/json"}
        })

    const task=await response.json()

    console.log('Nouvelle tâche ajoutée:', task);

    addTaskModal.style.display = 'none';

    taskForm.reset();

    window.location.href="/task"
});

    </script>

<script>
    document.querySelectorAll('.delete-btn').forEach(button => {
        button.addEventListener('click', function() {
            const taskRow = this.closest('.task-row'); 
            const taskName = taskRow.cells[1].textContent; 
            const taskId = taskRow.getAttribute('data-id');

            const confirmDelete = confirm(`Voulez-vous vraiment supprimer la tâche "${taskName}" ?`);

            if (confirmDelete) {
                fetch(`/task/delete/${taskId}`, {
                    method: 'DELETE',
                })
                .then(response => response.json())
                .then(result => {
                    if (result.message === "success") {
                        taskRow.remove();
                        document.getElementById('task-count').textContent = document.querySelectorAll('.task-row').length;
                        alert('Tâche supprimée avec succès');
                    } else {
                        alert('Erreur lors de la suppression de la tâche.');
                    }
                })
                .catch(err => {
                    alert('Erreur de serveur');
                    console.error(err);
                });
            } else {
                alert('Suppression annulée');
            }
        });
    });

</script>

<script>
    document.querySelectorAll('.status-select').forEach(select => {
        select.addEventListener('change', function () {
            const taskRow = this.closest('.task-row'); 
            const taskId = taskRow.getAttribute('data-id'); 
            const newStatus = this.value; 


            fetch(`/task/editStatus/${taskId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ status: newStatus }),
            })
            .then(response => response.json())
            // .then(result => {
            //     if (result.message === "success") {
            //         alert('Statut modifié avec succès');
            //         if (newStatus === "completed") {
            //         } else if (newStatus === "incomplete") {
            //         } else {
            //         }
            //     } else {
            //         alert('Erreur lors de la modification du statut.');
            //     }
            // })
            .catch(err => {
                alert('Erreur de serveur');
                console.error(err);
            });
        });
    });
</script>

</body>
</html>